/*Write a program to demonstrate Integer data type.*/
class IntegerDataTypeDemo  
{
	public static void main(String args[]) 
	{
		int a=10;
		System.out.println("Value of a variable is="+a);
	}
}




/*Write program to demonstrate String.*/
class StringDemo
{
	public static void main(String args[]) 
	{
		String name="Java";
		System.out.println("Name is="+name);
	}
}




/*Write a program to perform Subtraction of entered two numbers.*/
class Subtraction
{
	public static void main(String args[]) 
	{
		int a,b,c;
	    a=Integer.parseInt(args[0]);
		b=Integer.parseInt(args[1]);
		c=a-b;
		System.out.println("Subtraction is="+c);
	}
}

/*
   Write a program to perform Subtraction of entered two numbers without using 
   variables to store enter two values and store result in third variable.
*/
class SubtractionWithoutUsingTwoVariables 
{
	public static void main(String[] args) 
	{
		int a,b,c;
		c=Integer.parseInt(args[0])-Integer.parseInt(args[1]);
		System.out.println("Subtraction is="+c);
	}
}



/*Write a program to perform Subtraction of entered two numbers without using any variables.*/
class SubstractionWithoutUsingVariables
{
	public static void main(String[] args) 
	{
		System.out.println("Subtraction is="+(Integer.parseInt(args[0])-Integer.parseInt(args[1])));
	}
}



/*Write a program to swap two numbers using third variable.*/
class SwapingNumbersUsingThirdVariables
{
	public static void main(String args[])
	{
			int a,b,c;
			a=Integer.parseInt(args[0]);
			b=Integer.parseInt(args[1]);
			System.out.println("Value of a before swap="+a+"\nValue of b before swap="+b);
			c=a;
			a=b;
			b=c;
			System.out.println("Value of a after swap="+a+"\nValue of b after swap="+b);
	}
		 
}



/*Write a program to swap two numbers without using third variable.*/
class SwapingNumbersWithoutUsingThirdVariables
{
	public static void main(String args[])
	{
		int a,b;
		a=Integer.parseInt(args[0]);
		b=Integer.parseInt(args[1]);
		System.out.println("Value of a before swap="+a+"\nValue of b before swap="+b);
		a=a+b;
		b=a-b;
		a=a-b;
		System.out.println("Value of a after swap="+a+"\nValue of b after swap="+b);
	}
}



/*Write a program to demonstrate tan method Math class.*/
class TanMethodDemo 
{
	public static void main(String args[]) 
	{
		 int a;
		 double b;
		 a=Integer.parseInt(args[0]);
		 b=Math.tan(a);
		 System.out.println("Tan value of entered number is="+b);
	}
}
/*
Note:-
      1] This is method of Math class and this class is present in lang package(i.e import java.lang.*)
	     which implcitly import in every program of java. 
      2] This method is static method so that it is called by class name(i.e Math.tan(arg1)).
	  3] This method must have one argument.
	  4] This method must return tan value of given number in radian.
	  5] This method must return double value.
	  6] This method has four forms.
	       a] tan(int) return tan value of Integer  data type.
		   b] tan(long) return tan value of Long data type.
		   c] tan(float) return tan value of Float data type.
		   d] tan(double) return tan of Double data type.
	  7] That simply means it works with Integer,Long,Float,Double data types.
*/


/*Write a program to demonstrate Type casting.*/
class TypeCasting 
{
	public static void main(String[] args) 
	{
		int a=20,b=3;
		double c;
		c=(double)a/b;
		System.out.println("Result is="+c);
	}
}



/*Write a program to demonstrate separator in assigning value.*/
class ValueWithSeperatorDemo
{
	public static void main(String args[]) 
	{
		int a=1_000_000;
        float b=2_200_312.34F;
		double c=3_200_312.34;
		int d=01_631;
		int e=0x1_632;
		System.out.println("Value of a="+a);
		System.out.println("Value of b="+b);
		System.out.println("Value of c="+c);
		System.out.println("Value of d variable of Octal Representation="+d);
		System.out.println("Value of e variable of Hexadecimal Representation="+e);
	}
}
/*
Note:-
      1] This program run only on JDK7 and above version of JDK.
	  2] We can not placed -(underscore) at end of literal(value).
	     if we will do that it gives error.
	  3] _ Between digit is as , in value that is generally used when human represent value.
	     like 10,000.
	  4] If you want write 1,00,000 in Java then statement become like below.
	     1,00,000--->In human represention.
		 1_00_000--->In Java represention.
      5] You can represent value contain '_' with octal and hexadecimal numbers.
	  6] And with Float and Double value.
	  7] But it can not applied to boolean data type.
*/

/* Write a program to create variable using $ sign.*/
class VariableUsing$sign
{
	public static void main(String args[]) 
	{
		int $=10;
		int $a=20;
		System.out.println("Value using $ is="+$);
		System.out.println("Value of $a is="+$a);
	}
}


/*Write a program demonstrate Logical operators.*/
class LogicalOperators
{
	public static void main(String[] args) 
	{
		boolean a=true,b=false; 
		System.out.println("AND="+(a&&b));
		System.out.println("OR="+(a||b));
		System.out.println("NOT="+(!a));
	}
}
/*
Note:-
       1] Logical operators directly work with boolean data type.
	   2] Logical operators are 
	      
		  ---------------------------------------------------------------
		  | Sr no |  Oprator       |	Meanging                        |
			____________________________________________________________
		  |  1    |       &&       |  AND                               |
			____________________________________________________________
		  |  2    |       ||       |  Greater than                      |
			____________________________________________________________
		  |  3    |       !        |  NOT                               |
			____________________________________________________________
	3] NOT operator is uninary operator(operator has only one operand).
		 
*/	  



/* Write a program to demonstrate Logical operators with Boolean data type.*/
class LogicalOperatorsWithBooleanDataType
{
	public static void main(String[] args) 
	{
		boolean a=true,b=false; 
		boolean AND,OR,NOT;
		AND=a&&b;
		OR=a||b;
		NOT=!a;
		System.out.println("AND="+AND);
		System.out.println("OR="+OR);
		System.out.println("NOT="+NOT);
	}
}
/*
Note:-
       1] Logical operators directly work with boolean data type.
	   2] Logical operators are 
	      
		  ---------------------------------------------------------------
		  | Sr no |  Oprator       |	Meanging                        |
			____________________________________________________________
		  |  1    |       &&       |  AND                               |
			____________________________________________________________
		  |  2    |       ||       |  Greater than                      |
			____________________________________________________________
		  |  3    |       !        |  NOT                               |
			____________________________________________________________
	3] NOT operator is uninary operator(operator has only one operand).
		 
*/	  



/*Write a program demonstrate Logical operators with Relational operators.*/
class LogicalOperatorsWithRelationalOperators 
{
	public static void main(String args[]) 
	{
	   int  a,b,c;
	   boolean b1,b2,b3;
	   a=Integer.parseInt(args[0]);
	   b=Integer.parseInt(args[1]);
	   c=Integer.parseInt(args[2]);
	   b1=(a>b)&&(a>c);
	   b2=(a>b)||(a>c);
	   b3=!(a>b)||(a>c);
	   System.out.println("AND operator="+b1);
	   System.out.println("OR operator="+b2);
	   System.out.println("NOT operator="+b3);
     }
}
/*
Note:-
       1] Logical operators directly work with boolean data type.
	   2] Logical operators are 
	      
		  ---------------------------------------------------------------
		  | Sr no |  Oprator       |	Meanging                        |
			____________________________________________________________
		  |  1    |       &&       |  AND                               |
			____________________________________________________________
		  |  2    |       ||       |  Greater than                      |
			____________________________________________________________
		  |  3    |       !        |  NOT                               |
			____________________________________________________________
	3] NOT operator is uninary operator(operator has only one operand).
		 
*/	  



/*Write a program to demonstrate Long data type.*/
class LongDataTypeDemo
{
	public static void main(String[] args) 
	{
		 long  a=10;
		 long  b=20L;
		 long  c=20l;
		 System.out.println("Value of a="+a);
		 System.out.println("Value of b="+b);
		 System.out.println("Value of c="+c);
	}
}


/*Write a program to find Maximum Range of primitive data types in Java.*/
class MaximumRangeOfDataTypesDemo
{
	public static void main(String[] args) 
	{
		 int i,c;
		 double d;
		 short s;
		 long l;
		 float f;
		 byte b;
		 i=Integer.MAX_VALUE;
		 System.out.println("Maximum range of Integer(int)="+i);

		 f=Float.MAX_VALUE;
		 System.out.println("Maximum range of float="+f);

		 d=Double.MAX_VALUE;
		 System.out.println("Maximum range of double="+d);

		 l=Long.MAX_VALUE;
		 System.out.println("Maximum range of long="+l);

		 c=Character.MAX_VALUE;
		 System.out.println("Maximum range of Character(char)="+c);

		 b=Byte.MAX_VALUE;
		 System.out.println("Maximum range of byte="+b);

		 s=Short.MAX_VALUE;
		 System.out.println("Maximum range of short="+s);
	}
}
/*
    Note:-
			 1] By using MAX_VALUE constant we can find maximum range of primitive data types only.
			 2] We can not have MAX_VALUE constant for boolean data type.
			 3] So that we can not do like(i.e Boolean.MAX_VALUE is not applicable).
			 4] That simply means boolean data type do not have maximum and minimum range.
				That why we can not find maximum and minimum range.
*/		 



/*Write a program to print Minimum and Maximum range of primitive data types in Java.*/
class MinimumMaximumRangeOfDataTypesDemo
{
	public static void main(String[] args) 
	{
		 int mini,maxi,minc,maxc;
		 double mind,maxd;
		 short mins,maxs;
		 long minl,maxl;
		 float minf,maxf;
		 byte minb,maxb;

		 mini=Integer.MIN_VALUE;
		 maxi=Integer.MAX_VALUE;
		 System.out.println("Range of integer(int) data type is="+mini+" to "+maxi);

		 minf=Float.MAX_VALUE;
		 maxf=Float.MIN_VALUE;
		 System.out.println("Range of float datatype is="+minf+" to "+maxf);
		 
		 mins=Short.MIN_VALUE;
		 maxs=Short.MAX_VALUE;
		 System.out.println("Range of short datatype is="+mins+" to "+maxs);
		 
		 minl=Long.MIN_VALUE;
		 maxl=Long.MAX_VALUE;
		 System.out.println("Range of long datatype is="+minl+" to "+maxl);
         
		 minc=Character.MIN_VALUE;
		 maxc=Character.MAX_VALUE;
		 System.out.println("Range of character(char) datatype is="+minc+" to "+maxc);
         
		 minb=Byte.MIN_VALUE;
		 maxb=Byte.MAX_VALUE;
		 System.out.println("Range of byte datatype is="+minb+" to "+maxb);
	}
}


/*Write a program to find Minimum Range of primitive data types in Java.*/
class MinimumRangeOfDataTypesDemo
{
	public static void main(String[] args) 
	{
		 int i,c;
		 double d;
		 short s;
		 long l;
		 float f;
		 byte b;
		 i=Integer.MIN_VALUE;
		 System.out.println("Minimum range of Integer(int)="+i);

		 f=Float.MIN_VALUE;
		 System.out.println("Minimum range of float="+f);

		 d=Double.MIN_VALUE;
		 System.out.println("Minimum range of double="+d);

		 l=Long.MIN_VALUE;
		 System.out.println("Minimum range of long="+l);

		 c=Character.MIN_VALUE;
		 System.out.println("Minimum range of character="+c);
		 S
		 b=Byte.MIN_VALUE;
		 System.out.println("Minimum range of byte="+b);

		 s=Short.MIN_VALUE;
		 System.out.println("Minimum range of short="+s);
	}
}
/*
  Note:-
			1] By using MIN_VALUE constant we can find minimum range of primitive data types only.
			2] We can not have MIN_VALUE constant for boolean data type.
			3] So that we can not do like(i.e Boolean.MIN_VALUE is not applicable).
			4] That simply means boolean data type do not have maximum and minimum range.
			   That why we can not find maximum and minimum range	
	


/* Write a program to demonstrate Mod operator with float and double data type.*/
class ModOperationWithFloatAndDoubleDataType
{
	public static void main(String args[])
	{
		 float a=12.23f;
		 float b=2.23f;
		 float c;

		 double d=11;
		 double e=2;
		 double f;

		 c=a%b;
		 System.out.println("Mod operation on float data type is="+c);

		 f=d%e;
		 System.out.println("Mod operation on double data type is="+f);
	}

}


/*Write a program to perform Multiplication of entered two numbers.*/
class Multiplication
{
	public static void main(String args[]) 
	{
		int a,b,c;
	    a=Integer.parseInt(args[0]);
		b=Integer.parseInt(args[1]);
		c=a*b;
		System.out.println("Multiplication is="+c);
	}
}



/*
   Write a program to perform Multiplication of entered two numbers without using 
   variables to store enter two values and store result in third variable.
 */
class MultiplicationWithoutUsingTwoVariables 
{
	public static void main(String[] args) 
	{
		 int a,b,c;
		 c=Integer.parseInt(args[0])*Integer.parseInt(args[1]);
		 System.out.println("Multiplication is="+c);
	}
}



/*Write a program to perform Multiplication of entered two numbers without using any variables.*/
class MultiplicationWithoutUsingVariables
{
	public static void main(String[] args) 
	{
		System.out.println("Multiplication is="+(Integer.parseInt(args[0])*Integer.parseInt(args[1])));
	}
}








/*Write a program to demonstrate negative hexadecimal representation in Java.*/
class NegativeRepresentationOfHexadecimalNumber
{
	public static void main(String args[]) 
	{
		int a=-0X53;
		System.out.printf("\nNegtive Hexadecimal representation in Java= %X",a);
	}
}
/*
  Note:-
        1] Here in variable a we store negative Hexadecimal number.
		2] For finding result of negative Hexadecimal number we are doing following procedure.
		     Here
			    int a=-0X53;

			   Step:-1  Take group of four binary for each digit which is given below.
               ------
				        5       3
					   
					    0101    0011
					     |       |
					    \|/     \|/
					  Binary   Binary
					   of       of 
					    5       3

			  Step:-2  Combine obtained binary of digits.
			  -------
			             01010011-----------> Combining binaries of  5 and 3 and it is binary 53.
				
			  Step:-3  Finding 1's complements of combined binary.
              -------

			            0   1  0  1  0  0  1  1
                        |   |  |  |  |  |  |  |  
					    |   |  |  |  |  |  |  |  
					    |   |  |  |  |  |  |  |  
					    1   0  1  0  1  1  0  0 --------> 1's complement of 53 in binary.
			
			Step:-4 Finding 2's complements of 53 in binary from 1's complement.
			-------    
				    For finding 2's complement we add 1 into 1's complement.

					   1   0  1  0  1  1  0  0
					                         1
					---------------------------
					   1   0  1  0  1  1  0  1-------------->2's complement(-53)

		  Step:-5 For finding negative of 53 we must make pairs of 4 of above obtained 2's complement.
		  -------


		             1  0  1 0   1  1  0  1
					 ---------   ----------
					    A           D
   */
		          




/*Write a program to demonstrate negative Hexadecimal representation in Java.*/
class NegativeRepresentationOfHexadecimalNumberInJava
{
	public static void main(String args[]) 
	{
		int a=-0X;
		System.out.printf("\nNegtive Hexadecimal representation in Java= %X",a);
	}
}
/*
  Note:-
        1] Here in variable a we store negative Hexadecimal number.
		2] For finding result of negative Hexadecimal number we are doing following procedure.
		     Here
			    int a=-0X53;

			   Step:-1  Take group of four binary for each digit which is given below.
               ------
				        5       3
					   
					    0101    0011
					     |       |
					    \|/     \|/
					  Binary   Binary
					   of       of 
					    5       3

			  Step:-2  Combine obtained binary of digits.
			  -------
			             01010011-----------> Combining binaries of  5 and 3 and it is binary of Hexadecimal number 53.
				
			  Step:-3  Finding 1's complements of combined binary.
              -------

			            0   1  0  1  0  0  1  1
                        |   |  |  |  |  |  |  |  
					    |   |  |  |  |  |  |  |  
					    |   |  |  |  |  |  |  |  
					    1   0  1  0  1  1  0  0 --------> 1's complement of Hexadecimal number 53 in binary.
			
			Step:-4 Finding 2's complements of of Hexadecimal number 53 in binary from 1's complement.
			-------    
				    For finding 2's complement we add 1 into 1's complement.

					   1   0  1  0  1  1  0  0
					                         1
					---------------------------
					   1   0  1  0  1  1  0  1-------------->2's complement.

		  Step:-5 For finding negative of 53 we must make pairs of 4 of above obtained 2's complement.
		  -------


		             1  0  1 0   1  1  0  1
					 ---------   ----------
					    A           D
					  |_______________|---------->(-53)
   */

/*
Note:-
        1] We can use L or l suffix after assigning value to long data type.
		2] But we can not need to specify L or l suffix after assigning value to long data type
		   Java compiler automatically takes l as suffix after assigning value to long data type.
*/

/*Write a program to demonstrate Ocatl representation in Java.*/
class NegativeRepresentationOfOctalNumberInJava
{
	public static void main(String args[]) 
	{
		int a=-053;
		System.out.printf("\nNegtive Octal representation in Java= %o",a);
	}
}

		          
/*Write a program to demonstrate representation of Octal number in Java.*/
class OctalNumberRepresentionDemoInJava 
{
	public static void main(String args[]) 
	{
		 int a=030;
		 int b=000030;
		 System.out.printf("Value of a variable in Octal is=%o",a);
		 System.out.println("\nIts equivalent to Decimal for a variable is="+a);

		 System.out.printf("\nValue of b variable in Octal is=%o",b);
		 System.out.println("\nIts equivalent to Decimal for b variable is="+b);
	}
}



/*Write a program to calculate Radius of circle where user enter Diameter.*/
class  RadiusOfCircle
{
	public static void main(String args[]) 
	{
		 double diameter,radius;
		 diameter=Double.parseDouble(args[0]);
		 radius=diameter/2;
		 System.out.println("Radius of Circle is="+radius);
    }
}



/*Write a program to read different data types value by using nextLine() method of Scanner class.*/
import java.util.*;
class ReadingValueOfDifferentDataTypesUsingNextLineMethod
{
	public static void main(String args[])
	{
		int i;
		float f;
		double d;
		long l;
		short s;
		byte b;
		boolean bool;
		String  StringObject;
		Scanner Sc=new Scanner(System.in);
		System.out.println("Enter the value for Integer data type");
		i=Integer.parseInt(Sc.nextLine());
		System.out.println("Enter the value for Float data type");
		f=Float.parseFloat(Sc.nextLine());
		System.out.println("Enter the value for Double data type");
		d=Double.parseDouble(Sc.nextLine());
		System.out.println("Enter the value for Long data type");
		l=Long.parseLong(Sc.nextLine());
		System.out.println("Enter the value for Short data type");
		s=Short.parseShort(Sc.nextLine());
		System.out.println("Enter the value for Byte data type");
		b=Byte.parseByte(Sc.nextLine());
		System.out.println("Enter the value for Boolean data type");
		bool=Boolean.parseBoolean(Sc.nextLine());
		System.out.println("Enter the String");
		StringObject=Sc.nextLine();
		System.out.println("Value Read by Scanner for Intger Data type is="+i);
		System.out.println("Value Read by Scanner for Float Data type is="+f);
		System.out.println("Value Read by Scanner for Double Data type is="+d);
		System.out.println("Value Read by Scanner for Long Data type is="+l);
		System.out.println("Value Read by Scanner for Short Data type is="+s);
		System.out.println("Value Read by Scanner for Byte Data type is="+b);
		System.out.println("Value Read by Scanner for Boolean Data type is="+bool);
		System.out.println("String Read by Scanner class="+StringObject);

	}
}
 


 /*Write a program to read different data types value by using nextLine() method of Scanner class.*/
import java.util.*;
class ReadingValueOfDifferentDataTypesUsingNextLineMethod
{
	public static void main(String args[])
	{
		int i;
		float f;
		double d;
		long l;
		short s;
		byte b;
		boolean bool;
		String  StringObject;
		Scanner Sc=new Scanner(System.in);
		System.out.println("Enter the value for Integer data type");
		i=Integer.parseInt(Sc.nextLine());
		System.out.println("Enter the value for Float data type");
		f=Float.parseFloat(Sc.nextLine());
		System.out.println("Enter the value for Double data type");
		d=Double.parseDouble(Sc.nextLine());
		System.out.println("Enter the value for Long data type");
		l=Long.parseLong(Sc.nextLine());
		System.out.println("Enter the value for Short data type");
		s=Short.parseShort(Sc.nextLine());
		System.out.println("Enter the value for Byte data type");
		b=Byte.parseByte(Sc.nextLine());
		System.out.println("Enter the value for Boolean data type");
		bool=Boolean.parseBoolean(Sc.nextLine());
		System.out.println("Enter the String");
		StringObject=Sc.nextLine();
		System.out.println("Value Read by Scanner for Intger Data type is="+i);
		System.out.println("Value Read by Scanner for Float Data type is="+f);
		System.out.println("Value Read by Scanner for Double Data type is="+d);
		System.out.println("Value Read by Scanner for Long Data type is="+l);
		System.out.println("Value Read by Scanner for Short Data type is="+s);
		System.out.println("Value Read by Scanner for Byte Data type is="+b);
		System.out.println("Value Read by Scanner for Boolean Data type is="+bool);
		System.out.println("String Read by Scanner class="+StringObject);

	}
}
/*
Note:-
      1] Scanner class is present in import java.util  package(i.e when we muse Scanner class then we must use util package in the program).
	  2] Scanner class must contain at least one argument in constructor.Because There is not default constructor of Scanner class.
	  3] This class does throw Exception like BufferedReader class.
	  4] There is no direct method to read character by using this class.
	  5] This class is used to handle entered or (Buffer) level data.
	  6] We can use nextLine method to read all data types value except character data type but it too hard to understand and it increases coding.
*/


/*
   Write a program to demonstrate DataInputStream class.
                      OR
   Write a program to read and display name, roll number and percentage of Student using DataInputStream class
*/
import java.io.*;
class ReadStudentDataUsingDataInputStreamClass
{   
	public static void main(String args[])
	{
		
		String name;
		int rollno;
		double percentage;
		DataInputStream ds;
		try
		{
			
			ds=new DataInputStream(System.in);
			System.out.println("Enter the Name of Student");
			name=ds.readLine();
			System.out.println("Enter the Roll No of Student");
			rollno=Integer.parseInt(ds.readLine());
			System.out.println("Enter the Percentage of Student");
			percentage=Double.parseDouble(ds.readLine());
			System.out.println("Name of Student="+name);
			System.out.println("Roll no of Student="+rollno);
			System.out.println("Percentage of Student="+percentage);
			
		}
		catch (IOException e)
		{
			System.out.println("Exception is due to="+e);
		}
		
	}
}



/*Write a program to read and display name, roll number and percentage of Student using Scanner class.*/
import java.util.*;
class ReadStudentDataUsingScannerClass
{
	public static void main(String args[])
	{
		String name;
		int rollno;
		double percentage;
		Scanner Sc=new Scanner(System.in);
		System.out.println("Enter the Name of Student");
		name=Sc.nextLine();
		System.out.println("Enter the Roll No of Student");
		rollno=Sc.nextInt();
		System.out.println("Enter the Percentage of Student");
		percentage=Sc.nextDouble();
		System.out.println("Name of Student="+name);
		System.out.println("Roll no of Student="+rollno);
		System.out.println("Percentage of Student="+percentage);
	}
}



	


/* Write a program to demonstrate Relational operators.*/
class RelationOperators
{
	public static void main(String[] args) 
	{
		 int a,b,c;
		 a=Integer.parseInt(args[0]);
		 b=Integer.parseInt(args[1]);
		 System.out.println("Less than="+(a<b));
		 System.out.println("Greater than="+(a>b));
		 System.out.println("Less than equal to="+(a<=b));
		 System.out.println("Greater than equal to="+(a>=b));
		 System.out.println("Equal to="+(a==b));
		 System.out.println("Not Equal to="+(a!=b));
	}
}
/*
Note:-
       1] Relation operators evalute boolean literal i.e either true or false.
	   2] Relation operators are 
	      
		  ---------------------------------------------------------------
		  | Sr no |  Oprator       |	Meanging                        |
			____________________________________________________________
		  |  1    |       <        |  Less than                         |
			____________________________________________________________
		  |  2    |       >        |  Greater than                      |
			____________________________________________________________
		  |  3    |       <=       |  Less than equal                   |
			____________________________________________________________
		  |  4    |       >=       |   Grater than equal                |
			____________________________________________________________
		  |  5    |       ==       |   Equal to                         |
			____________________________________________________________
		  |  6    |      !=        | Not equal to                       | 
		  _______________________________________________________________
*/	  




/*Write a program to demonstrate Relational operators with Boolean data type.*/
class RelationOperatorsWithBooelanDataType
{
	public static void main(String[] args) 
	{
		 int a,b,c;
		 boolean r1,r2,r3,r4,r5,r6;
		 a=Integer.parseInt(args[0]);
		 b=Integer.parseInt(args[1]);
		 r1=a<b;
		 r2=a>b;
		 r3=a<=b;
		 r4=a>=b;
		 r5=a==b;
		 r6=a!=b;
		 System.out.println("Less than="+r1);
		 System.out.println("Greater than="+r2);
		 System.out.println("Less than equal to="+r3);
		 System.out.println("Greater than equal to="+r4);
		 System.out.println("Equal to="+r5);
		 System.out.println("Not Equal to="+r6);
	}
}
/*
Note:-
       1] Relation operators evalute boolean literal i.e either true or false.
	   2] Relation operators are 
	      
		  ---------------------------------------------------------------
		  | Sr no |  Oprator       |	Meanging                        |
			____________________________________________________________
		  |  1    |       <        |  Less than                         |
			____________________________________________________________
		  |  2    |       >        |  Greater than                      |
			____________________________________________________________
		  |  3    |       <=       |  Less than equal                   |
			____________________________________________________________
		  |  4    |       >=       |   Grater than equal                |
			____________________________________________________________
		  |  5    |       ==       |   Equal to                         |
			____________________________________________________________
		  |  6    |      !=        | Not equal to                       | 
		  _______________________________________________________________
*/	  





/*  Write a program to perform mod operation on entered numbers.
                       OR
    Write a program to find Reminder of entered two numbers.
*/
class Reminder
{
	public static void main(String args[])
	{
			int a,b,c;
			a=Integer.parseInt(args[0]);
			b=Integer.parseInt(args[1]);
			c=a%b;
			System.out.println("Mod Operation is on Integer data type is="+c);
	}
}
/*
   Note:-
         1] Mod operator is used for finding reminder on applied numbers.
		 2] It is applicable on Integer, Float , Double data types but this is not applicable in C Language and C++.
		 3] That means in C language and C++ mod operator is applicable on Integer data type only.
		    For More detail Please see Mod.cpp file where this program file is saved.
*/


/*Write a program to demonstrate Short data type.*/
class ShortDataTypeDemo  
{
	public static void main(String args[]) 
	{
		short a=10;
		System.out.println("Value of a="+a);
	}
}
/*
Note:-
       1] Programmer must not use any suffix after assigning value to short data type.
	   2] And Java does not provides any suffix to short data type automatically.
	   3] If Programmer try to do it compiler will give error.

*/


/*Write a program to calculate Simple interest where user enter Principle amount ,Rate of Interest and No of Year.*/
class SimpleInterest
{
	public static void main(String args[])
	{
		double principle_Amount,rate_Of_Interest,Simple_Interest;
		int no_Of_Year;
		principle_Amount=Double.parseDouble(args[0]);
	    rate_Of_Interest=Double.parseDouble(args[1]);
		no_Of_Year=Integer.parseInt(args[2]);
		Simple_Interest=(principle_Amount*rate_Of_Interest*no_Of_Year)/100;
		System.out.println("Simple Interest is="+Simple_Interest);
	}
}

/*Write a program to demonstrate sin method Math class.*/
class SinMethodDemo 
{
	public static void main(String args[]) 
	{
		 double a;
		 double b;
		 a=Integer.parseInt(args[0]);
		 b=Math.sin(a);
		 System.out.println("Sin value of entered number is="+b);
	}
}
/*
Note:-
      1] This is method of Math class and this class is present in lang package(i.e import java.lang.*)
	     which implcitly import in every program of java. 
      2] This method is static method so that it is called by class name(i.e Math.sin(arg1)).
	  3] This method must have one argument.
	  4] This method must return sin value of given number in radian.
	  5] This method must return double value.
	  6] This method has four forms.
	       a] sin(int) return sin value of Integer  data type.
		   b] sin(long) return sin value of Long data type.
		   c] sin(float) return  sin  value of Float data type.
		   d] sin(double) return  sin of Double data type.
	  7] That simply means it works with Integer,Long,Float,Double in data types .
*/


/*
   Write a program to display no. of bits require for Java data type.
                   OR
   Write a program to prove that Java is Architecture neutral Language.
*/ 
class SizeOfDataTypesDemo 
{
	public static void main(String[] args) 
	{
		int i,c;
		float f;
		short s;
		long l;
		byte b;
		double d;
		i=Integer.SIZE;
		System.out.println("Bits require for Integer(int) Data type is="+i);

		f=Float.SIZE;
		System.out.println("Bits require for float Data type is="+f);

		c=Character.SIZE;
		System.out.println("Bits require for Character(char) Data type is="+c);

		s=Short.SIZE;
		System.out.println("Bits require for short Data type is="+s);

		l=Long.SIZE;
		System.out.println("Bits require for long Data type is="+l);

		b=Byte.SIZE;
		System.out.println("Bits require for byte Data type is="+b);

		d=Double.SIZE;
		System.out.println("Bits require for double Data type is="+d); 
	}
}
/*
  Note:-
      1] This method does not work with boolean data type.
	  2] This method return size of primitive data types in bits.
*/


/* 
    Write a program to display no. of Bytes require for Java data type.
                     OR
    Write a program to prove that Java is Architecture neutral Language
*/ 
class SizeOfDataTypesInByteDemo 
{
	public static void main(String[] args) 
	{
		int i,c;
		float f;
		short s;
		long l;
		byte b;
		double d;

		i=Integer.SIZE;
		System.out.println("Bytes require for Integer(int) Data type is="+i/8);

		f=Float.SIZE;
		System.out.println("Bytes require for float Data type is="+f/8);

		c=Character.SIZE;
		System.out.println("Bytes require for character(char) Data type is="+c/8);

		s=Short.SIZE;
		System.out.println("Bytes require for short Data type is="+s/8);

		l=Long.SIZE;
		System.out.println("Bytes require for long Data type is="+l/8);

		b=Byte.SIZE;
		System.out.println("Byte require for byte Data type is="+b/8);

		d=Double.SIZE;
		System.out.println("Bytes require for double Data type is="+d/8); 
	}
}
/*
  Note:-
       1] This method does not work with boolean data type.
	   2] This method return size of primitive data types in bit.
	   3] But we can display numbers of bytes required those data types by this method and divide result by 8.
*/



/*Write a program to demonstrate squrt method of Math class*/
class SqrtMethodDemo 
{
	public static void main(String args[]) 
	{
		 int a;
		 double b;
		 a=Integer.parseInt(args[0]);
		 b=Math.sqrt(a);
		 System.out.println("squareroot of entered number is="+b);
	}
}
/*
Note:-
      1] This is method of Math class and this class is present in lang package(i.e import java.lang.*)
	     which implcitly import in every program of java. 
      2] This method is static method so that it is called by class name(i.e Math.sqrt(arg1)).
	  3] This method must have one argument.
	  4] This method return square root of given number.
	  5] This method must return double value.
	  6] This method has four forms.
	       a] sqrt(int) return square root value of Integer  data type.
		   b] sqrt(long) return square root value of Long data type.
		   c] sqrt(float) return square root value of float data type.
		   d] sqrt(double) return square root value of double data type.
	  7] That simply means it work with Integer,Long,Float,Double data type.
*/







/*Write a program to calculate total marks and percentage of five subjects.*/
class MarksAndPercentageOfFiveSubjects
{
	public static void main(String args[])
	{
		int subject1,subject2,subject3,subject4,subject5;
		int total;
		double percentage;
		subject1=Integer.parseInt(args[0]);
	    subject2=Integer.parseInt(args[1]);
		subject3=Integer.parseInt(args[2]);
		subject4=Integer.parseInt(args[3]);
		subject5=Integer.parseInt(args[4]);
		total=subject1+subject2+subject3+subject4+subject5;
		percentage=(double)total/500*100;
		System.out.println("Total mark of 5 subjects are="+total);
		System.out.println("Percentage is="+percentage);
	}
}





/*Write a program to perform Addition of entered two numbers.*/
public class Addition
{
	public static void main(String args[]) 
	{
		int a,b,c;
		a=Integer.parseInt(args[0]);
		b=Integer.parseInt(args[1]);
		c=a+b;
		System.out.println("Addition is="+c);
	}
}


/*
   Write a program to perform Addition of entered two numbers without using 
   variables to store enter two values and store result in third variable.
*/
class AdditonWithoutUsingTwoVariables 
{
	public static void main(String[] args) 
	{
		 int a,b,c;
		 c=Integer.parseInt(args[0])+Integer.parseInt(args[1]);
		 System.out.println("Addition is="+c);
	}
}


/*Write a program to perform Addition of entered two numbers without using any variables.*/
class AdditionWithoutUsingVariables
{
	public static void main(String[] args) 
	{
		System.out.println("Addition is="+(Integer.parseInt(args[0])+Integer.parseInt(args[1])));
	}
}


/*Write a program to perform Addition of enter two numbers and display result in Dialog box.*/
import javax.swing.*;
class AdditionUsingDialogBox
{
	public static void main(String args[]) 
	{
		int a,b,c;
		a=Integer.parseInt(args[0]);
		b=Integer.parseInt(args[1]);
		c=a+b;
		JOptionPane.showMessageDialog(null,"Addition is="+c,"Result Box",JOptionPane.INFORMATION_MESSAGE);
	}
}



/*
   Write a program to perform Addition of number using BufferedReader class. 
                 OR
   Write a program to demonstrate BufferedReader class.
*/
import java.io.*;
class AdditionBufferReaderDemo 
{
	public static void main(String args[]) 
	{
	     int a,b,c;
		 BufferedReader b1;
	     b1=new BufferedReader(new InputStreamReader(System.in));
		 try
		 {
			
			System.out.println("Enter the a&b");
			a=Integer.parseInt(b1.readLine());
			b=Integer.parseInt(b1.readLine());
			c=a+b;
			System.out.println("Addition="+c);
			 

		  }
		 catch (IOException e)
		 {
			System.out.println("Exception is="+e);
		 }
	}
}


/*
  Write a program to perform Addition of number using Scanner class.
           OR
  Write a program to demonstrate Scanner class.
*/
import java.util.*;
class AdditionUsingScannerClass
{
	public static void main(String args[])
	{
		int a,b,c;
		Scanner Sc=new Scanner(System.in);
		System.out.println("Enter the a");
		a=Sc.nextInt();
		System.out.println("Enter the b");
		b=Sc.nextInt();
		c=a+b;
		System.out.println("Addition is="+c);
	}
}


/*Write a program to calculate Area of Circle where user enter radius.*/
class  AreaOfCircle
{
	public static void main(String args[]) 
	{
		 double radius,AreaOfCicle;
		 radius=Double.parseDouble(args[0]);
		 AreaOfCicle=3.14*radius*radius;
		 System.out.println("Area of Circle is="+AreaOfCicle);
    }
}


/*Write a program to perform Arithmetic operations in single System.out.println*/
class ArithmeticOperationInSingleSoP
{
	public static void main(String args[]) 
	{
		 int a,b,c;
		 a=Integer.parseInt(args[0]);
		 b=Integer.parseInt(args[1]);
		 System.out.println("Addition is="+(a+b)
			                 +"\nSubtraction="+(a-b)
			                 +"\nMultiplication="+(a*b)
			                 +"\nDivision is="+(a/b)
			                 +"\nMod is="+(a%b));
	}
}

/*Write a program to perform Arithmetic operations in System.out.println.*/
class ArithmeticOperationInSOP
{
	public static void main(String[] args) 
	{
		 int a,b,c;
		 a=Integer.parseInt(args[0]);
		 b=Integer.parseInt(args[1]);
		 System.out.println("Addition is="+(a+b)); 
		 System.out.println("Subtraction is="+(a-b)); 
		 System.out.println("Multiplication="+(a*b)); 
		 System.out.println("Division is="+(a/b)); 
		 System.out.println("Mod is="+(a%b)); 
	}
}


 /*Write a program to perform Arithmetic operations of enter two numbers and display result in Dialog box.*/
import javax.swing.*;
class ArithmeticOperationUsingDialogBox
{
	public static void main(String args[]) 
	{
		int a,b,c;
		a=Integer.parseInt(args[0]);
		b=Integer.parseInt(args[1]);
		JOptionPane.showMessageDialog(null,"Addition is="+(a+b),"ResultBox",JOptionPane.INFORMATION_MESSAGE);
		JOptionPane.showMessageDialog(null,"Subtraction is="+(a-b),"ResultBox",JOptionPane.INFORMATION_MESSAGE);
		JOptionPane.showMessageDialog(null,"Multiplication is="+(a*b),"ResultBox",JOptionPane.INFORMATION_MESSAGE);
		JOptionPane.showMessageDialog(null,"Division is="+(a/b),"ResultBox",JOptionPane.INFORMATION_MESSAGE);
		JOptionPane.showMessageDialog(null,"Mod is="+(a%b),"ResultBox",JOptionPane.INFORMATION_MESSAGE);

	}
}



/* Write a program to demonstrate Arithmetic operators.*/
class ArithmeticOperatorsDemo
{
	public static void main(String[] args) 
	{
			int a,b,c;
			a=Integer.parseInt(args[0]);
			b=Integer.parseInt(args[1]);
			c=a+b;
			System.out.println("Addition is="+c);
			c=a-b;
			System.out.println("Subtraction is="+c);
			c=a*b;
			System.out.println("Multiplication is="+c);
			c=a/b;
			System.out.println("Division is="+c);
			c=a%b;
			System.out.println("Mod is="+c);
	}
}



/*Write a program to calculate Area of Circle where user enter radius*/
class  AreaOfCircle
{
	public static void main(String args[]) 
	{
		 double radius,AreaOfCicle;
		 radius=Double.parseDouble(args[0]);
		 AreaOfCicle=3.14*radius*radius;
		 System.out.println("Area of Circle is="+AreaOfCicle);
    }
}


/* Write a program to demonstrate Autoboxig.*/
class AutoBoxingExample
{
	public static void main(String[] args) 
	{
		int a=10;
		Integer b=a;
		System.out.println("Value of B using Autoboxing is="+b);
	}
}
/*
   Note:-
         1] Autoboxing means converting primitive data type into respective object type.
		 2] All primitive data types converting into their respective object type.
		 3] Auto boxing was introduced in JDK5.
*/
      
/* Write a program to demonstrate Autounboxig.*/
class AutoUnBoxingExample
{
	public static void main(String[] args) 
	{
		Integer a=10;
		int b=a;
		System.out.println("Value of B using Autounboxing is="+b);
	}
}
/*
   Note:-
         1] Autounboxing means automatic conversion object type into respective primitive data type.
		 2] Auto unboxing was introduced in JDK5.
  
*/
      



/*Write a program to demonstrate Bitwise operators.*/
class BitwiseOperatorsDemo 
{
	public static void main(String args[]) 
	{
		int a=10,b=5;
	    int r1,r2,r3,r4,r5,r6;
		r1=a&b;
		r2=a|b;
		r3=a^b;
		r4=~a;
		r5=a<<2;
		r6=a>>2;
		System.out.println("Bitwise AND="+r1);
		System.out.println("Bitwise OR="+r2);
		System.out.println("Bitwise Ex-OR="+r3);
		System.out.println("Bitwise  ones complement="+r4);
		System.out.println("Bitwise left shift operator is="+r5);
		System.out.println("Bitwise right shift operator is="+r6);   
     }
}
/*
Note:-
       1] Bitwise operators only work on short,byte,long int,boolean operand.
	   2] Bitwise operators does not work with float or double operand but we can store result of bitwise 
	      operation in float or double data type variable. 
       3] We can not store result of Bitwise operation in short,byte operand. Because short, byte data type promotated
	      into integer data type(That means result of short and byte operand on bitwise converted into integer
		  data type due type promotion. 
	   4] Result of Bitwise operators vary with positive and negative value.
	   6] We perform left and right shift more than 32 (Size of Integer data type in Java) bits for integer 
	      operand than it perform mode operation and perform shifiting operation.
		  Lets understand following example.

		    int a=5,b;
			b=a<<66;
			Here we notice that we shift 5 by 66 bits towards left.But maximum bits require for integer data type is 32.
			Here we shift 5 by 66 bits towards left and 66 is greater than 32.
			Hence first left shift operator find reminder and then perform shifting operation towards left.
			Let us see how it work below.
			
			66%32=2
			Here 66 is number of bits to be want to shifted at left and 32 is number of bits require for integer data type.
			After doing that left shift perform following.

			c=5*2^2;
			Here 2 is mode operator result we was done above.
			After that we will get 20 as result.
			c=20;


			int a=5,b;
			b=a>>66;
			Here we notice that we shift 5 by 66 bit towards right.But maximum bits require for integer data type is 32.
			Here we shift 5 by 66 bits towards right and 66 is greater than 32.
			Hence first right operator find reminder and then perform shifting operation.
			Let us see how it work below.
			
			66%32=2
			Here 66 is number of bits to be want to shifted at left and 32 is number of bits require for integer data type.
			After doing that right shift perform following.

			c=5/2^2;
			Here 2 is mode operator result we was done above.
			After that we will get 1 as result.
			c=1;

           Note:-Above is applicable for integer data type not for short, byte data type.
		   -------------------------------------------------------------------------------

			

	   7] Bitwise operators are 
	      
		  ---------------------------------------------------------------
		  | Sr no |  Oprator       |	Meanging                        |
			____________________________________________________________
		  |  1    |       &&       |  Bitwise AND                       |
			____________________________________________________________
		  |  2    |       |        |  Bitwise OR                        |
			____________________________________________________________
		  |  3    |       ^        |  Bitwise Ex-OR                     |
			____________________________________________________________
		  |  4    |       <<       |  Left shift                        |
			____________________________________________________________
		  |  5    |       >>       |  Right shift                       |
			____________________________________________________________
		  |  6    |      ~         |  One complement                    | 
		  _______________________________________________________________
*/	  





/*Write a program to demonstrate Bitwise operators with negative value only.*/
class BitwiseOperatorsDemoWithNegativeValuesOnly 
{
	public static void main(String args[]) 
	{
		int a=-2,b=-1;
	    int r1,r2,r3,r4,r5,r6;
		r1=a&b;
		r2=a|b;
		r3=a^b;
		r4=~a;
		r5=a<<-2;
		r6=a>>-1;
		System.out.println("Bitwise AND operation with negative value is="+r1);
		System.out.println("Bitwise OR with negative value is="+r2);
		System.out.println("Bitwise Ex-OR operation with negative value is="+r3);
		System.out.println("Bitwise ones complement operation with negative value is="+r4);
		System.out.println("Bitwise left shift operation with negative value is="+r5);
		System.out.println("Bitwise right shift operation with negative value is="+r6);   
     }
}


/*Write a program to demonstrate Bitwise operators with positive and negative values.*/
class BitwiseOperatorsDemoWithPositiveAndNegativeValues 
{
	public static void main(String args[]) 
	{
		int a=-50,b=3;
	    int r1,r2,r3,r4,r5,r6;
		r1=a&b;
		r2=a|b;
		r3=a^b;
		r4=~a;
		r5=a<<2;
		r6=a>>2;
		System.out.println("Bitwise AND operation with positive and negative value is="+r1);
		System.out.println("Bitwise OR with positive and negative value is="+r2);
		System.out.println("Bitwise Ex-OR operation with positive and negative value is="+r3);
		System.out.println("Bitwise ones complement operation with positive and negative value is="+r4);
		System.out.println("Bitwise left shift operation with positive and negative value is="+r5);
		System.out.println("Bitwise right shift operation with positive and negative value is="+r6);   
     }
}





/*Write a program to demonstrate Bitwise operators with positive and negative values.*/
class BitwiseOperatorsWithBooleanDataType
{
	public static void main(String args[])
	{
		boolean a=true,b=false;
		boolean r1,r2,r3;
		r1=a&b;
		r2=a|b;
		r3=a^b;
		System.out.println("Bitwise AND operator with boolean data type is="+r1);
		System.out.println("Bitwise OR operator with boolean data type is="+r2);
		System.out.println("Bitwise EX-OR operator with boolean data type is="+r3);
	}
}
/*
  Note:-
        1] We can use only Bitwise AND(&), Bitwise OR(|), Bitwise EX-OR(^) along with boolean data type.
		2] We can not use Bitwise left shift(<<) and right shift(>>) and one's complement (~) operator along with boolean data type.
		3] Result of mention in above operators must evalute boolean value.
*/      




/*Write a program to demonstrate Boolean data type.*/ 
class BooleanDataTypeDemo  
{
	public static void main(String args[]) 
	{
		boolean a=true;
		boolean b=false;
		System.out.println("Value of a="+a);
		System.out.println("Value of b="+b);
	}
}
/*
Note:-
       1] Programmer must not use any suffix after assigning value to boolean data type.
	   2] And Java does not provides any suffix to boolean data type automatically.
	   3] If Programmer try to do it compiler will give error.
	   4] We must use true and false literal(value) with boolean data type.
	   5] We must not use 0 as false and 1 as true even if simply mean that.
	   6] If we assign literal(value) rather than true or false complier will give error.
*/


/*Write a program to demonstrate Byte data type.*/ 
class ByteDataTypeDemo  
{
	public static void main(String args[]) 
	{
		byte a=10;
		System.out.println("Value of a="+a);
	}
}
/*
Note:-
       1] Programmer must not use any suffix after assign value to byte data type.
	   2] And Java does not provides any suffix to byte data type automatically.
	   3] If Programmer try to do it compiler will give error.
	   4] It is mostly used when working with data from network or files. 
*/





 /*Write a program to demonstrate Character data type.*/
class CharacterDataTypeDemo  
{
	public static void main(String[] args) 
	{
		char a='A';
		char b='\u0042';
		char c=67;
		System.out.println("Character in a="+a);
		System.out.println("Character in b="+b);
		System.out.println("Character in c="+c);
	}
}
/*
Note:-
       1] Character data type requires two bytes because it uses Unicode system by default.
	   2] Java supports 18 international languages throght Unicode.For storing 18 international languages characters 1 byte is not
	      sufficient to store those characters so that Java use 2 Bytes for Character data type. 
	   3] So that it never mean that we does not use ASCII formate with character data type in directly. 
	   4] we can also use ASCII with character data type.
       4] In above program char a='A' contains 'A' character that mean it contains Unicode value of character 'A'
	   5] In above program char a=67 is stored in c variable  that mean we can assign ASCII value to character data type and it converted into Hexadecimal that is Unicode value.
*/   
	   

 /* Write a program to demonstrate Character data type along with Octal and Hexadecimal value.*/
class  CharacterDataTypeDemoWithOctalAndHexadcecimalNumbers  
{
	public static void main(String args[]) 
	{
		char a='A';
		char b='\u0042';
		char c=67;
		char d=0104;
		char e=0x46;
		System.out.println("Character in a variable from Character value is ="+a);
		System.out.println("Character in b variable from Unicode value is="+b);
		System.out.println("Character in c variable from Decimal value is="+c);
		System.out.println("Character in d variable from Octal value is="+d);
		System.out.println("Character in e variable from Octal value is="+e);


	}
}



/*Write a program to calculate Circumference of circle where user enter  radius.*/
class CircumferenceOfCircle
{
	public static void main(String args[]) 
	{
		 double radius,CircumferenceOfCircle;
		 radius=Double.parseDouble(args[0]);
		 CircumferenceOfCircle=2*3.14*radius;
		 System.out.println("Circumference of Circle is="+CircumferenceOfCircle);
    }
}


/*
   Write a program to demonstrate const keyword in Java.
                 OR
   Write a program to define constant using cost keyword.
*/
class ConstKeywordInJava 
{
	public static void main(String args[]) 
	{
		const int a=10;
		System.out.println("Value of a is="+a);
	}
}
/*
   Note:-
         1] This program is not compile and not run because const keyword is present 
		    in Java but we must not use it.
		 2] To define constant in Java we must use final keyword.
*/


/* 
    Write a program to demonstrate PI static filed of Math class. 
                OR
    Write a program to display PI value using Math class.
*/
class PIValueDemo
{
	public static void main(String args[]) 
	{
		System.out.println(Math.PI);
	}
}


/*Write a program to convert Decimal number into its Hexadecimal number.*/
class DecimalToHexadecimal 
{
	public static void main(String[] args) 
	{
		 int a;
		 a=Integer.parseInt(args[0]);
		 System.out.printf("Decimal to Hexadecimal is=%x",a);
	}
}


/*Write a program to convert Decimal number into its Octal number.*/
class DecimalToOctal 
{
	public static void main(String[] args) 
	{
		 int a;
		 a=Integer.parseInt(args[0]);
		 System.out.printf("Decimal to Octal is=%o",a);
	}
}



/* Write a program to demonstrate Decrement operators.*/
class DecrementOpratorsDemo 
{
	public static void main(String args[]) 
	{
		int a=10,b,c=20,d;
	    System.out.println("Value of variable a before predecrement operator="+a);
		b=--a;
		System.out.println("Value of variable a after predecrement operator="+a);
		System.out.println("Value of variable b ="+b);
		System.out.println("Value of variable c before post predecrement operator="+c);
		d=c--;
		System.out.println("Value of variable d ="+d);
		System.out.println("Value of variable c after post predecrement operator="+c);

	    
     }
}


/*Write a program to calculate Diameter of Circle where user enter radius.*/
class  DiameterOfCircle
{
	public static void main(String args[]) 
	{
		 double radius,diameter;
		 radius=Double.parseDouble(args[0]);
		 diameter=2*radius;
		 System.out.println("Diameter of Circle is="+diameter);
    }
}



/*Write a program to demonstrate Different method of Scanner class to read different Data type value 
and for reading a string .
                           OR
Write a program to demonstrate following methods of Scanner class
1]nextByte()
2]nextBoolean()
3]nextDouble()
4]nextFloat()
5]nextLong()
6]netxLine()
7]nextInt()
8]nextShort()
*/

import java.util.*;
class DifferenetScannerClassMethodsDemo
{
	public static void main(String args[])
	{
		int i;
		float f;
		double d;
		long l;
		short s;
		byte b;
		boolean bool;
		String  StringObject;
		Scanner Sc=new Scanner(System.in);
		System.out.println("Enter the value for Integer data type");
		i=Sc.nextInt();
		System.out.println("Enter the value for Float data type");
		f=Sc.nextFloat();
		System.out.println("Enter the value for Double data type");
		d=Sc.nextDouble();
		System.out.println("Enter the value for Long data type");
		l=Sc.nextLong();
		System.out.println("Enter the value for Short data type");
		s=Sc.nextShort();
		System.out.println("Enter the value for Byte data type");
		b=Sc.nextByte();
		System.out.println("Enter the value for Boolean data type");
		bool=Sc.nextBoolean();
		System.out.println("Enter the String");
		StringObject=Sc.nextLine();
		System.out.println("Value Read by Scanner for Intger Data type is="+i);
		System.out.println("Value Read by Scanner for Float Data type is="+f);
		System.out.println("Value Read by Scanner for Double Data type is="+d);
		System.out.println("Value Read by Scanner for Long Data type is="+l);
		System.out.println("Value Read by Scanner for Short Data type is="+s);
		System.out.println("Value Read by Scanner for Byte Data type is="+b);
		System.out.println("Value Read by Scanner for Boolean Data type is="+bool);
		System.out.println("String Read by Scanner class="+StringObject);

	}
}
/*
Note:-
      1]Scanner class is present in import java.util  package(i.e when we use scanner class we must util package in the program).
	  2]Scanner class must contain at least one argument in constructor.Because There is not default constructor of Scanner class.
	  3]This class does throw Exception like BufferReader class.
	  4]There is no direct method to read character by using this class.
	  5]This class is used to handle enetered or (Buffere) level data.
	  6]We can use nextLine to read all data types value but it too hard understand and it increase coding.
*/








/* Write a program to deeply demonstrate printf method.*/ 
class DisplayAllDatatypeValueUsingPrintfMethod
{
	public static void main(String[] args) 
	{
		byte b=10;
	    short s=20;
		int i=30;
		long l=40;
		float f=50.0f;
		double d=60.0;
		char c='a';
		boolean bool=true;
		System.out.printf("Byte value is=%d",b);
		System.out.printf("\nShort value is=%d",s);
		System.out.printf("\nInt value is=%d",i);
		System.out.printf("\nLong value is=%d",l);
	/*-----------Octal representation of byte,short,integer,long data type----------*/

		System.out.printf("\n\n\nByte value is in Octal representation is=%o",b);
		System.out.printf("\nShort value is in Octal representation is=%o",s);
		System.out.printf("\nInteger value is in Octal representation is=%o",i);
		System.out.printf("\nLong value is in Octal representation is=%o",l);
    /*---------------------End of Octal representation-------------------------------*/ 

	/*-----------Octal representation of byte,short,integer,long data type in Java----------*/

		System.out.printf("\n\n\nByte value is in Octal representation in Java is=%#o",b);
		System.out.printf("\nShort value is in Octal representation in Java is=%#o",s);
		System.out.printf("\nInteger value is in Octal representation in Java is=%#o",i);
		System.out.printf("\nLong value is in Octal representation in Java is=%#o",l);
    /*---------------------End of Octal representation in Java-------------------------------*/ 
        
	/*-----------Hexadecimal representation of byte,short,integer,long data type in small Hexadecimal letter----------*/

	    System.out.printf("\n\n\nByte value is in Hexadecimal representation in small Hexadecimal letter is=%x",b);
		System.out.printf("\nShort value is in Hexadecimal representation is in small Hexadecimal letter is=%x",s);
		System.out.printf("\nInteger value is in Hexadecimal representation is in small Hexadecimal letter is=%x",i);
		System.out.printf("\nLong value is in Hexadecimal representation is in small Hexadecimal letter is=%x",l);
	/*-----------End Hexadecimal representation of byte,short,integer,long data type in small letter----------*/

	/*-----------Hexadecimal representation of byte,short,integer,long data type in Capital Hexadecimal letter----------*/

	    System.out.printf("\n\n\nByte value is in Hexadecimal representation in capital Hexadecimal letter is=%X",b);
		System.out.printf("\nShort value is in Hexadecimal representation is in capital Hexadecimal letter is=%X",s);
		System.out.printf("\nInteger value is in Hexadecimal representation is in capital Hexadecimal letter is=%X",i);
		System.out.printf("\nLong value is in Hexadecimal representation is in capital Hexadecimal letter is=%X",l);
	/*-----------End Hexadecimal representation of byte,short,integer,long data type in Capital Hexadecimal letter----------*/

	/*-----------Hexadecimal representation of byte,short,integer,long data type in Small Hexadecimal letter in Java----------*/

	    System.out.printf("\n\n\nByte value is in Hexadecimal representation in Java in small Hexadecimal letter is=%#x",b);
		System.out.printf("\nShort value is in Hexadecimal representation is in Java in small Hexadecimal letter is=%#x",s);
		System.out.printf("\nInteger value is in Hexadecimal representation is in Java in small Hexadecimal letter is=%#x",i);
		System.out.printf("\nLong value is in Hexadecimal representation is in Java in small Hexadecimal letter is=%#x",l);
	/*-----------End Hexadecimal representation of byte,short,integer,long data type in in small letter in Java----------*/

	/*-----------Hexadecimal representation of byte,short,integer,long data type in Capital letter hexadecimal in Java----------*/

	    System.out.printf("\n\n\nByte value is in Hexadecimal representation in Java in capital Hexadecimal letter is=%#X",b);
		System.out.printf("\nShort value is in Hexadecimal representation is in Java in capital Hexadecimal letter is=%#X",s);
		System.out.printf("\nInteger value is in Hexadecimal representation is in Java in capitalal Hexadecimal letter is=%#X",i);
		System.out.printf("\nLong value is in Hexadecimal representation is in Java in capital Hexadecimal letter is=%#X",l);
	/*-----------End Hexadecimal representation of byte,short,integer,long data type in in Capital Hexadecimal letter in Java----------*/




		System.out.printf("\n\n\nFloat value in normal form is=%f",f);
		System.out.printf("\nDouble value in normal form is=%f",d);
   /*-----------float and double data type in Exponent form----------*/

		System.out.printf("\n\n\nFloat value in exponent form is=%e",f);
		System.out.printf("\nDouble value in exponent form is=%g",d);

   /*------------End of Exponent form-------------------------------*/

         System.out.printf("\n\n\nCharacter value is in small is =%c",c);
		 System.out.printf("\nCharacter value is in Capital is =%C",c);

		System.out.printf("\n\n\nBoolean value is in small is =%b",bool);
		System.out.printf("\nBoolean value is in Capital is =%B",bool);
		
    }
}
/*
  Note:-
         1] printf method was introduced in JDK5.
		 2] For Integer family(integer,Long,Short,Byte) %d is used.
         3] Range of holding by %d is same as range of long data type.
		 4] We can not use %D with integer family.
		 5] We can also represent integer family value in Octal and Hexadecimal form by using %o and %x.
		 6] For representating integer family number in octal form we use %o.
		 7] For representating integer family number in octal form in Java we use %#o.
		 8] For representating integer family number in Hexadecimal form we use %x.
		 9] For representating integer family number in Hexadecimal form in capital form we use %x.
		10] For representating integer family number in Hexadecimal form in Java we use %#x.
		11] For representating integer family number in Hexadecimal form in small Hexadecimal letter we use %x.
		12] For representating integer family number in Hexadecimal form in Capital Hexadecimal letter we use %X.
		13] We can not use %x or %X and %o or %O with float and double data type.
		14] Table for understanding above description.
		    
			--------------------------------------------------------------------------------- 
		   |Sr.no| Data type   | Representation of Number| Small/Capital  | Format specifier |
		   ---------------------------------------------------------------------------------- 
		   | 1	 |  byte	   |   Decimal               |   -			  |   %d             |
		   ----------------------------------------------------------------------------------- 
		   | 2	 |  short      |   Decimal				 |	 -			  |   %d             |
		   ----------------------------------------------------------------------------------- 
		   | 3	 |  int        |   Decimal               |	 -			  |   %d             |
		   ----------------------------------------------------------------------------------- 
		   | 4	 |  long       |   Decimal               |	 -			  |   %d             |
		   ----------------------------------------------------------------------------------- 
		   | 5	 |  byte	   |   Octal                 |	 -			  |   %o             |
		   ----------------------------------------------------------------------------------- 
		   | 6	 |  short      |   Octal 				 |	 -			  |   %o             |
		   ----------------------------------------------------------------------------------- 
		   | 7	 |  int        |   Octal                 |	 -			  |   %o             |
		   ----------------------------------------------------------------------------------- 
		   | 8	 |  long       |   Octal                 |	 -			  |   %o             |
		   ----------------------------------------------------------------------------------- 
		   | 9	 |  byte	   |   Hexadecimal           |	small		  |   %x             |
		   ----------------------------------------------------------------------------------- 
		   | 10	 |  short      |   Hexadecimal 			 |	small		  |   %x             |
		   -----------------------------------------------------------------------------------
		   | 11	 |  int        |   Hexadecimal           |	small		  |   %x             |
		   -----------------------------------------------------------------------------------
		   | 12	 |  long       |   Hexadecimal           |	small		  |   %x             |
		   -----------------------------------------------------------------------------------
		   | 13	 |  byte	   |   Hexadecimal           |	capital		  |   %X             |
		   -----------------------------------------------------------------------------------
		   | 14	 |  short      |   Hexadecimal 			 |	capital		  |   %X             |
		   -----------------------------------------------------------------------------------
		   | 15	 |  int        |   Hexadecimal           |	capital		  |   %X             |
		   ----------------------------------------------------------------------------------
		   | 16	 |  long       |   Hexadecimal           |	capital		  |   %X             |
		   -----------------------------------------------------------------------------------
		    Tip:- Here in above table Octal and Hexadecimal representation in Java is not specified. Pelease read respective points at above.
        
		15] For boolean data type value we use %b to display boolean literal in small letter and %B to display 
		    boolean literal in capital letter(JDK5 and above).
		16] For Displaying Character value we use %c for displaying character in small letter(Allow JDK5 and above JDK).
		17] For Displaying Character value we use %C for displaying character in capital letter(Allow in JDK6 and above JDK).   
		    
*/




/*Write a program to perform Division of entered two numbers.*/
class Division
{
	public static void main(String args[]) 
	{
		int a,b,c;
	    a=Integer.parseInt(args[0]);
		b=Integer.parseInt(args[1]);
		c=a/b;
		System.out.println("Division is="+c);
	}
}







/*
   Write a program to perform Division of entered two numbers without using 
   variables to store enter two values and store result in third variable.
 */
class DivisionWithoutUsingTwoVariables 
{
	public static void main(String[] args) 
	{
		 int a,b,c;
		 c=Integer.parseInt(args[0])/Integer.parseInt(args[1]);
		 System.out.println("Division is="+c);
	}
}




/*Write a program to perform Division of entered two numbers without using any variables.*/
class DivisionWithoutUsingVariables
{
	public static void main(String[] args) 
	{
		System.out.println("Division is="+(Integer.parseInt(args[0])/Integer.parseInt(args[1])));
	}
}






/*Write a program to demonstrate Double data type.*/
class  DoubleDataTypeDemo  
{
	public static void main(String[] args) 
	{
		double a=10;
		double b=10.23;
		double c=23.10F;
		double d=23.10D;
		double e=10.23d;
		System.out.println("Value of a="+a);
		System.out.println("Value of b="+b);
		System.out.println("Value of c="+c);
		System.out.println("Value of d="+d);
		System.out.println("Value of e="+e);
	}
}

/*
Note:-
        1] We can store integer as well as pointing value in double data type.
        2] By defult all pointing value are consider as double in java.
		3] We do not need to apply any suffix after inializing pointing value for double data type.
		4] But we can specify suffix after inializing pointing value.
		5] We can use D or d as suffix after inializing pointing value to double data type.
		5] When we inialize any value as double data type it take value as double 
		      suppose:-
			            double a=10.23 /*Programmer written statement.
						double a=10.23d /*Above statement taken by Java.
		6] We can also use f/F suffix with double data type because when we write f/F with float 
		   data type java consider it as float data type value and float data type requires 4 bytes and double data type
		   requires 8 bytes that why we can do it we can assign lower data type into higher.
*/				







/*Write a program to demonstrate Explicit Type casting.*/
class ExplicitTypeCasting 
{
	public static void main(String[] args) 
	{
		int a;
		double b=10.23;
		a=(int)b;
		System.out.println("Result is="+a);
	}
}


/* Write a program to demonstrate Exponent in double and float data type.
                                 OR	
   Write a program to shift decimal point after two digit.*/

class ExponentDemo  
{
	public static void main(String[] args) 
	{
		double a=0.0314E2;
		double b=-0.000000314e-5;
		System.out.println("Value of a="+a);
		System.out.println("Value of b="+b);
	}
}
/*
Note:-
        1] Exponent operation must not applicable with float data type.
        2] When we shifting point in double data type we must use suffix E or e.
		3] Exponent is applicable with positive value and negative value.
*/





/* Write a program to demonstrate Exponent along with float data type. */
class ExponentDemoWithFloatDataType 
{
	public static void main(String args[]) 
	{
		float a=0.0314E2F;
		float b=0.0314e2f;
		System.out.println("Exponent value of a variable with float data type and capital E and F suffix="+a);
		System.out.println("Exponent value of b variable with float data type and small e and f suffix="+b);
	}
}
/*
  Note:-
         1] When we define Exponent in Java it consider that exponent value as double literal by default.
		    Let us see Examples:-

			  1. double a=0.0314E2;// Valid statement.
			  2. float a=0.0314E2;// Invalid statement.

			  Explaination:-
			               1. In Example 2 Java compiler took 0.0314E2 value as double.
						      So that this double literal is not store in float data type because float data type
							  requires 4 bytes and double data type require 8 bytes.
		 2] For storing exponent value in float data type we must convert double literal into float literal by doing 
		    following way.
			 
			    1. float a=0.0314E2F; // Valid statement.
				2. float a=0.0314e2f; // Valid statement.
					
				Explaination:-

				            1. Above both examples are valid.
							2. 0.0314E2F and 0.0314e2f are float literal in exponent form.
*/
				


/*Write a program to demonstrate Float data type.*/
class  FloatDataTypeDemo  
{
	public static void main(String[] args) 
	{
		float a=10.23f;
		float b=10.21F;
		float c=10F;
		System.out.println("Value of a="+a);
		System.out.println("Value of b="+b);
		System.out.println("Value of c="+c);
	}
}
/*
Note:-
        1] We can store integer as well as pointing value in float data type.
        2] When we writing decimal point value in Java program it by default 
           consider as double data type.
		3] So when we use float data type along with pointing value while inialization in Java program we
		   must specify F OR f suffix  after it only applicable when inializing float data type only.
		4] When we inialize float data type along with integer value then we need not require f/F suffix after 
		   that value. If we specify f/F suffix after that value compiler never give error and program run 
		   successfully.
		5] When we write f/F with float data type java consider it as float data type value not as 
		   double data type value.
		   
*/ 


/*Write a program to demonstrate floor method Math class.*/
class FloorMethodDemo 
{
	public static void main(String args[]) 
	{
		 int a;
		 double b;
		 a=Double.parseDouble(args[0]);
		 b=Math.floor(a);
		 System.out.println("Round value of entered number is="+b);
	}
}
/*
Note:-
      1] This is method of Math class and this class is present in lang package(i.e import java.lang.*)
	     which implcitly import in every program of java. 
      2] This method is static method so that it is called by class name(i.e Math.floor(arg1)).
	  3] This method must have one arguments.
	  4] This method must return round value of given number.
	  5] This method return double value.
	  6] This method has four forms.
	       a] floor(int) return round value of Integer data type number.
		   b] floor(long) return round value of Long data type number.
		   c] floor(float) return  round  value of Float data type  number.
		   d] floor(double) return  value of Double data type number.
	  7] That simply means it work with Integer,Long,float,Double data types.
*/





/* Write a program to do formatting with printf method */
class FormattingWithPrintfMethod
{
	public static void main(String args[]) 
	{
		int a=10;
		double b=1012.123456;
		String c="Chetan";
		char d[]={'M','u','k','e','s','h'};

		System.out.printf("%10d",a);
		System.out.printf("\n%03d",a);
		System.out.printf("\n%d",a);
		System.out.printf("\n%.2f",b);
		System.out.printf("\n%10.3s",c);
		System.out.printf("\n%10.3S",c);
		System.out.printf("\n%5c",d[0]);

	}
}



/*
   Write a program to calculate Gross salary where user enter Basic salary .
   Use following data.
   HRA=0.3(3%)
   TA=0.2(2%)
   DA=0.10(1%)
*/
class GrossSalary
{
	public static void main(String args[])
	{
		double basic_salary,Gross_Salary;
		double HRA,TA,DA;
		basic_salary=Double.parseDouble(args[0]);
		HRA=basic_salary*0.3;
		TA=basic_salary*0.2;
		DA=basic_salary*0.10;
		Gross_Salary=basic_salary+HRA+TA+DA;
		System.out.println("Gross Salary is="+Gross_Salary);
	}
}






/*Write a program to demonstrate representation of Hexadecimal number in Java.*/
class HexadecimalNumberRepresentionDemoInJava 
{
	public static void main(String args[]) 
	{
		 int a=0XA;
		 int b=0Xb;

		 System.out.printf("Value of a variable in Hexadecimal is=%x",a);
		 System.out.println("\nIts equivalent to Decimal for a variable is="+a);

		 System.out.printf("\nValue of b variable in Hexadecimal is=%x",b);
		 System.out.println("\nIts equivalent to Decimal for b variable is="+b);
	}
}







/*Write a program to demonstrate Implicit Type casting*/
class ImplicitTypeCasting 
{
	public static void main(String[] args) 
	{
		int a=10;
		double b;
		b=a;
		System.out.println("Result is="+b);
	}
}



/*Write a program to demonstrate Increment operators.*/
class IncrementOperatorsDemo 
{
	public static void main(String args[]) 
	{
		int a=10,b,c=20,d;
	    System.out.println("Value of variable a before preincrement operator="+a);
		b=++a;
		System.out.println("Value of variable a after preincrement operator="+a);
		System.out.println("Value of variable b ="+b);
		System.out.println("Value of variable c before post increment operator="+c);
		d=c++;
		System.out.println("Value of variable d ="+d);
		System.out.println("Value of variable c after post increment operator="+c);
     }
}










